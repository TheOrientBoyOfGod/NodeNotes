{
  "_args": [
    [
      "bug",
      "C:\\Users\\TopSage\\Desktop\\nodejs\\expressmodule\\myproject"
    ]
  ],
  "_from": "bug@latest",
  "_id": "bug@0.1.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/bug",
  "_npmUser": {
    "email": "airportyh@gmail.com",
    "name": "airportyh"
  },
  "_npmVersion": "1.2.32",
  "_phantomChildren": {},
  "_requested": {
    "name": "bug",
    "raw": "bug",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/bug/-/bug-0.1.1.tgz",
  "_shasum": "8cbcace9122294bef388774a70e3ffd150a4862b",
  "_shrinkwrap": null,
  "_spec": "bug",
  "_where": "C:\\Users\\TopSage\\Desktop\\nodejs\\expressmodule\\myproject",
  "author": {
    "name": "Toby Ho"
  },
  "bugs": {
    "url": "https://github.com/airportyh/bug/issues"
  },
  "dependencies": {},
  "description": "A mixin that allows object to easily listen in on child objects.",
  "devDependencies": {
    "tape": "~1.0.2"
  },
  "directories": {
    "example": "examples"
  },
  "dist": {
    "shasum": "8cbcace9122294bef388774a70e3ffd150a4862b",
    "tarball": "https://registry.npmjs.org/bug/-/bug-0.1.1.tgz"
  },
  "gitHead": "411d17dd9f41f5751d899416ef31bfbffe94b8aa",
  "homepage": "https://github.com/airportyh/bug#readme",
  "keywords": [
    "events"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "email": "airportyh@gmail.com",
      "name": "airportyh"
    }
  ],
  "name": "bug",
  "optionalDependencies": {},
  "readme": "Bug - Listening Device for JS Objects\n=====================================\n\nA tiny Javascript library that conviniently handles event binding between objects. It works with the event apis for DOM elements, Node style event emitters api (on/removeListener), and the jQuery/Backbone style on/off api.\n\n## Install with Bower\n\n    bower install bug\n\n## Install with NPM\n\n    npm install bug\n\n## Usage\n\nHere is an example of the usage of bug. Let's say we were to write a widget that operates on a DOM element and wants to handle click events on that element:\n  \n    function Widget(elm){\n      this.elm = elm\n      Bug.attach(this) // attach all event handlers \n                       // defined, see below\n    }\n  \n    Widget.prototype = {\n      // the following event handler will handle all\n      // \"click\" events to the DOM element in the \"elm\"\n      // property\n      \"elm:click\": function(e){\n        console.log('elm was clicked!')\n      },\n      destroy: function(){\n        Bug.detach(this) // detaches all event handlers in the\n                         // specified format\n      }\n    }\n\n## API\n\nBug has 2 methods: \n\n  * `attach()` - attachs all event handlers specified (see below) and \n  * `detach()` - detaches all of them.\n\nThe event handlers in your object are specified by naming the property in the format `<property>:<event>`. For example, the following event handler will attach to the `click` event of the object stored in the `elm` property of the object.\n\n    \"button:click\": function(e){\n      console.log('You click me! You really click me!')\n    }\n\nThe `button` property can have the value of one of three kinds of objects\n\n1. a raw DOM element\n2. an object with an `on(event, callback)` method and an `off(event, callback)` method, as is the case with jQuery wrapped objects and Backbone models\n3. an object with an `on(event, callback)` method and a `removeListener(event, callback)` method, as is the case with Node event emitters\n\nBrowser Support\n---------------\n\nTested on IE 7.0+ and Chrome, should work on all modern browsers.",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/airportyh/bug.git"
  },
  "scripts": {
    "test": "testem ci"
  },
  "version": "0.1.1"
}
